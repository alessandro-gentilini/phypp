{"name":"phy++","tagline":"Library and tools designed for easy, robust and fast numerical astrophysics in modern C++. Inspired by the expressiveness of IDL.","body":"What is phy++?\r\n==============\r\n\r\nphy++ is a set of library and tools built to provide user friendly data manipulation as offered in interpreted languages like IDL [1] or its open source clone GDL [2], but with the added benefit of C++, i.e. increased robustness and speed. The library offers the following features:\r\n\r\n - multidimensional arrays with overloaded mathematical operators and mathematical functions, providing easy manipulation of tabulated data\r\n - a whole library of general purpose functions to modify and analyze these data\r\n - a FITS module allowing read/write operations on FITS images and tables\r\n - an ASCII module allowing read/write operations on ASCII tables\r\n - an astrophysics module providing tools such as cosmological calculations, PSF fitting, unit conversions, catalog cross-matching, ...\r\n - a full featured plot module to output graphs in EPS format (WIP)\r\n\r\nCurrently, the only drawback of using this library instead of IDL/GDL is that, at the time of writing, there is no stable and full featured C++ interpreter (although cling [3] is a promising candidate). This means that it is impossible to do \"real-time\" testing of code, and that any program must be recompiled\r\nwhenever a change is made. This issue can be partly solved by making use of command line arguments to quickly modify the behavior of a program.\r\n\r\nThe library itself relies on standard C++11 (using a few features from the upcoming C++14), and a small tool (_refgen_) is used to parse the source code to generate necessary data for compile-time reflection (which is not -- yet [4] -- part of the C++ standard).\r\n\r\n[1]: http://www.exelisvis.com/ProductsServices/IDL.aspx\r\n[2]: http://gnudatalanguage.sourceforge.net/\r\n[3]: http://root.cern.ch/drupal/content/cling\r\n[4]: https://groups.google.com/a/isocpp.org/forum/#!forum/reflection\r\n\r\n\r\nHow to use it?\r\n==============\r\n\r\n - create a new C++ file (foobar.cpp for example)\r\n - write some code:\r\n\r\n```cpp\r\n // Include the phy++ headers\r\n #include <phypp.hpp>\r\n\r\n // Declare the main function, entry point of the program\r\n int main(int argc, char* argv[]) {\r\n     // Read some arguments from the command line\r\n     uint_t n = 10;\r\n     read_args(argc, argv, arg_list(n));\r\n     // Create a vector containing 1, 2, ..., n-1\r\n     vec1d v = dindgen(n);\r\n     // Print the square root of each element\r\n     print(sqrt(v));\r\n     return 0;\r\n }\r\n```\r\n\r\n - invoke the phy++ compiler from the directory where the source code is located: \r\n\r\n```bash\r\nphy++ foobar n=20\r\n```\r\n\r\n - the program will compile and run automatically (if no compiler error occurred)\r\n - alternatively, you may also just compile the program using the cphy++ compiler:\r\n\r\n```bash\r\ncphy++ foobar.cpp\r\n```\r\n\r\n - ... then run the program yourself afterwards:\r\n\r\n```bash\r\n./foobar n=20\r\n```\r\n\r\nHow to get it?\r\n==============\r\n\r\nSimply download the code, either by cloning the git repository:\r\n\r\n```bash\r\ngit clone git@github.com:cschreib/phypp.git\r\n```\r\n\r\nor by downloading .tgz or .zip archives from this page. The library itself depends on several other libraries, all of which are fairly common and should be provided in your distribution's repositories (or in MacPorts if you are a MacOS user). Please refer to the `INSTALL` file in the main directory for detailed instructions on how to install the dependencies and the _phypp_ library.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}