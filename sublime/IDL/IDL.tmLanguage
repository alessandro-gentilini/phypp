<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>TextMate Syntax highlighting bundle for IDL (Interactive Data Language) by Research Systems Inc. (www.rsinc.com) -- bundle by Ethan Gutmann (gutmann@colorado.edu http://aster.colorado.edu).  Feel free to modify and distribute, please send comments or improvements back to me.</string>
	<key>fileTypes</key>
	<array>
		<string>pro</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? IDL -[*]-</string>
	<key>foldingStartMarker</key>
	<string>(?i:((begin\s*$)|(^\s*pro)|(^\s*function)))</string>
	<key>foldingStopMarker</key>
	<string>^\s*\b(?i:(end|endwhile|endif|endfor|endelse|endrep|endswitch|endcase))\b</string>
	<key>keyEquivalent</key>
	<string>^~I</string>
	<key>name</key>
	<string>IDL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\b(?i:(goto|inherits|common|compile_opt|else|forward_function|until|continue|break|repeat|begin|end|endif|endwhile|endfor|endelse|endrep|endswitch|endcase|case|default|do|else|for|if|then|return|switch|while|on_ioerror|of|stop))\b</string>
			<key>name</key>
			<string>keyword.control.idl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(MOD|XOR|GT|GE|LT|LE|EQ|NE|NOT|AND|OR))\b</string>
			<key>name</key>
			<string>keyword.operator.idl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E|d|D)(\+|-)?[0-9]+)?)(b|B|L|l|UL|ul|u|U|d|D|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.idl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\![A-Za-z_][A-Za-z0-9_]*</string>
			<key>name</key>
			<string>constant.language</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(^|\s)\s*\.[A-Za-z_][A-Za-z0-9_]*</string>
			<key>name</key>
			<string>support.function</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^;\+</string>
			<key>end</key>
			<string>^;-</string>
			<key>name</key>
			<string>comment.documentation.idl</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>;</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.single.idl</string>
			<key>swallow</key>
			<string>\;.*$</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>;;</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.double.idl</string>
			<key>swallow</key>
			<string>\\\s*\n</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>;;;</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.triple.idl</string>
			<key>swallow</key>
			<string>\\\s*\n</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"|$</string>
			<key>name</key>
			<string>string.quoted.double.idl</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>'|$</string>
			<key>name</key>
			<string>string.quoted.single.idl</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
                ( (?i:pro\s+) | (?i:function\s+) )
              	(?: [A-Za-z_][A-Za-z0-9_]* (::))?([A-Za-z_][A-Za-z0-9_]*)\s*(,)?
              </string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>operator.idl</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.idl</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>operator.idl</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\w)\s*$</string>
			<key>name</key>
			<string>declaration.function.idl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([A-Za-z_][A-Za-z_0-9]*)\s*(=)\s*([A-Za-z_][A-Za-z_0-9]*)</string>
					<key>name</key>
					<string>operator.idl</string>
			        <key>captures</key>
			        <dict>
				        <key>1</key>
				        <dict>
					        <key>name</key>
					        <string>variable.keyword.idl</string>
				        </dict>
				        <key>2</key>
				        <dict>
					        <key>name</key>
					        <string>operator.idl</string>
				        </dict>
				        <key>3</key>
				        <dict>
					        <key>name</key>
					        <string>variable.parameter.idl</string>
				        </dict>
			        </dict>
				</dict>
				<dict>
					<key>match</key>
					<string>([A-Za-z_][A-Za-z_0-9]*)</string>
					<key>name</key>
					<string>variable.parameter.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[\,\$]</string>
					<key>name</key>
					<string>operator.idl</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b([A-Za-z_][A-Za-z0-9_]*)\s*(\()</string>
	        <key>beginCaptures</key>
	        <dict>
		        <key>1</key>
		        <dict>
			        <key>name</key>
			        <string>support.function.idl</string>
		        </dict>
		        <key>2</key>
		        <dict>
			        <key>name</key>
			        <string>operator.idl</string>
		        </dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
	        <key>endCaptures</key>
	        <dict>
		        <key>1</key>
		        <dict>
			        <key>name</key>
			        <string>operator.idl</string>
		        </dict>
			</dict>
			<key>name</key>
			<string>meta.function.idl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([A-Za-z_][A-Za-z_0-9]*)\s*(?==)</string>
					<key>name</key>
					<string>variable.keyword.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[,\(])\s*(/[A-Za-z_][A-Za-z_0-9]*)</string>
					<key>name</key>
					<string>variable.keyword.idl</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
            <string>^\s*\b([A-Za-z_][A-Za-z0-9_]*)\s*(,)</string>
	        <key>beginCaptures</key>
	        <dict>
		        <key>1</key>
		        <dict>
			        <key>name</key>
			        <string>support.function.idl</string>
		        </dict>
		        <key>2</key>
		        <dict>
			        <key>name</key>
			        <string>operator.idl</string>
		        </dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\w|['\)\]])\s*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([A-Za-z_][A-Za-z_0-9]*)\s*(?==)</string>
					<key>name</key>
					<string>variable.keyword.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w)\s*(/[A-Za-z_][A-Za-z_0-9]*)</string>
					<key>name</key>
					<string>variable.keyword.idl</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.procedure.idl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[\.:&lt;&gt;\(\)\{\}\[\],=+\-*&amp;^/|$]</string>
			<key>name</key>
			<string>operator.idl</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-zA-Z0-9]+)</string>
					<key>name</key>
					<string>constant.character.escape.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.idl</string>
				</dict>
			</array>
		</dict>
		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>meta.parens.idl</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>operator.idl</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>operator.idl</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.idl</string>
	<key>uuid</key>
	<string>F781B94D-47FE-42E5-9B1C-0F4F711D6CC6</string>
</dict>
</plist>
