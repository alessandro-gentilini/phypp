cmake_minimum_required(VERSION 2.6)
project(phy++-tools)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.3))
        message(STATUS "clang version >= 3.3 (${CMAKE_CXX_COMPILER_VERSION})")
    else()
        message(FATAL_ERROR "phy++ requires advanced features from the C++14 norm that are only available with clang 3.3 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
    endif()

    add_definitions(-Weverything)
    add_definitions(-Wno-c++98-compat-pedantic)
    add_definitions(-Wno-c++98-compat)
    add_definitions(-Wno-unused-parameter)
    add_definitions(-Wno-sign-conversion)
    add_definitions(-Wno-conversion)
    add_definitions(-Wno-missing-variable-declarations)
    add_definitions(-Wno-missing-prototypes)
    add_definitions(-Wno-padded)
    add_definitions(-Wno-float-equal)
    add_definitions(-Wno-unused-variable)
    add_definitions(-Wno-global-constructors)
    add_definitions(-Wno-exit-time-destructors)
    add_definitions(-Wno-weak-vtables)
    add_definitions(-Wno-covered-switch-default)
    add_definitions(-Wno-documentation-unknown-command)
    add_definitions(-Wno-unneeded-internal-declaration)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-macros)
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        add_definitions(-g)
    else()
        add_definitions(-O3)
    endif()
    add_definitions(-std=c++1y)
    add_definitions(-ftemplate-backtrace-limit=0)
    add_definitions(-ferror-limit=5)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8))
        message(STATUS "gcc version >= 4.8 (${CMAKE_CXX_COMPILER_VERSION})")
    else()
        message(FATAL_ERROR "phy++ requires advanced features from the C++14 norm that are only available with gcc 4.8 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
    endif()

    add_definitions(-Wall)
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        add_definitions(-g)
    else()
        add_definitions(-O3)
    endif()
    add_definitions(-std=c++1y)
    add_definitions(-fmax-errors=5)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  message(ERROR "Intel C++ compiler is not supported")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  message(ERROR "Microsoft Visual C++ compiler is not supported")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/../cmake")
find_package(phypp)
find_package(CFITSIO)
find_package(CCFITS)
find_package(WCSLib)

add_subdirectory(catinfo)
add_subdirectory(findsrc)
add_subdirectory(fitstool)
add_subdirectory(getgal)
add_subdirectory(photinfo)
add_subdirectory(psffit)
add_subdirectory(qstack)
add_subdirectory(qstack2)
add_subdirectory(qxmatch)
add_subdirectory(qxmatch2)
add_subdirectory(subsrc)
